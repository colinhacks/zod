# Zod Internals Comprehensive Guide

## Core Architecture

### Schema Type System
All schemas extend `$ZodType` and implement `$ZodTypeInternals`. The core architecture is defined in:
- [packages/zod/src/v4/core/schemas.ts](mdc:packages/zod/src/v4/core/schemas.ts) - All schema type definitions
- [packages/zod/src/v4/core/core.ts](mdc:packages/zod/src/v4/core/core.ts) - Constructor system and type helpers
- [packages/zod/src/v4/core/util.ts](mdc:packages/zod/src/v4/core/util.ts) - Utility functions and type helpers

### Constructor Pattern
Zod uses a custom constructor system via `$constructor()` function:
```typescript
export const $ZodReadonly: core.$constructor<$ZodReadonly> = /*@__PURE__*/ core.$constructor(
  "$ZodReadonly",
  (inst, def) => {
    $ZodType.init(inst, def);
    // Schema-specific initialization
  }
);
```

## Key Internal Properties

### Core Properties
- `def`: Schema definition object containing type and configuration
- `traits`: Set of trait identifiers for this schema
- `id`: Unique identifier for the schema instance
- `version`: Zod core version
- `constr`: Constructor function reference

### Validation Properties
- `propValues`: Used for discriminated unions to store literal values per property
- `values`: Set of literal values that pass validation (for enums, literals, etc.)
- `pattern`: RegExp for string validation patterns
- `optin/optout`: Optionality flags for input/output types
- `isst`: Set of possible issue types this schema can throw

### Processing Properties
- `parse`: Function that parses input without running checks
- `run`: Function that parses input and runs all checks
- `deferred`: Array of deferred initializers
- `bag`: Metadata object for schema-specific data

## Schema Categories

### Primitive Schemas
- `$ZodString`, `$ZodNumber`, `$ZodBoolean`, `$ZodBigInt`
- `$ZodSymbol`, `$ZodUndefined`, `$ZodNull`, `$ZodAny`, `$ZodUnknown`
- `$ZodNever`, `$ZodVoid`, `$ZodDate`, `$ZodLiteral`

### Container Schemas
- `$ZodArray`, `$ZodObject`, `$ZodTuple`, `$ZodRecord`
- `$ZodMap`, `$ZodSet`, `$ZodUnion`, `$ZodIntersection`
- `$ZodDiscriminatedUnion`

### Wrapper Schemas
- `$ZodOptional`, `$ZodNullable`, `$ZodReadonly`
- `$ZodDefault`, `$ZodPrefault`, `$ZodNonOptional`
- `$ZodTransform`, `$ZodPipe`, `$ZodCatch`

### Special Schemas
- `$ZodEnum`, `$ZodPromise`, `$ZodLazy`, `$ZodCustom`
- `$ZodTemplateLiteral`, `$ZodNaN`, `$ZodSuccess`

## Common Patterns

### Wrapper Type Pattern
Wrapper types must pass through internal properties from their inner type:

```typescript
// Correct pattern for wrapper types
util.defineLazy(inst._zod, "propValues", () => def.innerType._zod.propValues);
util.defineLazy(inst._zod, "values", () => def.innerType._zod.values);
util.defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
util.defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
```

### Lazy Property Definition
Use `util.defineLazy()` to avoid circular dependencies:
```typescript
util.defineLazy(inst._zod, "propValues", () => {
  // Computed property logic
  return computedValue;
});
```

### Parse Function Pattern
Standard parse function structure:
```typescript
inst._zod.parse = (payload, ctx) => {
  // Type checking
  if (typeof payload.value !== "expected_type") {
    payload.issues.push({
      expected: "expected_type",
      code: "invalid_type",
      input: payload.value,
      inst,
    });
    return payload;
  }
  
  // Optional transformation
  if (def.coerce) {
    payload.value = transform(payload.value);
  }
  
  return payload;
};
```

## Error System

### Error Types
Defined in [packages/zod/src/v4/core/errors.ts](mdc:packages/zod/src/v4/core/errors.ts):
- `$ZodIssueInvalidType` - Wrong type provided
- `$ZodIssueTooBig/TooSmall` - Size/length constraints
- `$ZodIssueInvalidStringFormat` - String format validation
- `$ZodIssueInvalidUnion` - Union validation failures
- `$ZodIssueCustom` - Custom validation errors

### Error Creation
```typescript
payload.issues.push({
  code: "invalid_type",
  expected: "string",
  input: payload.value,
  inst,
  // Optional fields
  path: ["property"],
  message: "Custom message",
  continue: false, // Stop validation
});
```

## Check System

### Check Types
Defined in [packages/zod/src/v4/core/checks.ts](mdc:packages/zod/src/v4/core/checks.ts):
- Numeric checks: `$ZodCheckLessThan`, `$ZodCheckGreaterThan`, `$ZodCheckMultipleOf`
- Size checks: `$ZodCheckMaxSize`, `$ZodCheckMinSize`, `$ZodCheckSizeEquals`
- String checks: `$ZodCheckStringFormat`, `$ZodCheckRegex`, `$ZodCheckIncludes`
- Custom checks: `$ZodCheckProperty`, `$ZodCheckOverwrite`

### Check Pattern
```typescript
inst._zod.check = (payload) => {
  if (validationPasses(payload.value)) {
    return; // Success
  }
  
  payload.issues.push({
    code: "validation_code",
    // ... other fields
    inst,
    continue: !def.abort,
  });
};
```

## Parsing System

### Parse Functions
Defined in [packages/zod/src/v4/core/parse.ts](mdc:packages/zod/src/v4/core/parse.ts):
- `parse()` - Synchronous parsing
- `parseAsync()` - Asynchronous parsing
- `safeParse()` - Safe parsing (returns result object)
- `safeParseAsync()` - Safe async parsing

### Parse Context
```typescript
interface ParseContextInternal {
  async?: boolean;
  error?: $ZodErrorMap;
  reportInput?: boolean;
  jitless?: boolean;
}
```

### Parse Payload
```typescript
interface ParsePayload<T = unknown> {
  value: T;
  issues: $ZodRawIssue[];
}
```

## Utility Functions

### Type Helpers
- `util.defineLazy()` - Define lazy properties
- `util.cached()` - Create cached getters
- `util.prefixIssues()` - Add path prefixes to issues
- `util.finalizeIssue()` - Finalize raw issues
- `util.clone()` - Clone schemas

### Type Utilities
- `util.PrimitiveSet` - Set of primitive values
- `util.PropValues` - Record of property value sets
- `util.MaybeAsync<T>` - T | Promise<T>
- `util.Literal` - Union of literal types

## Discriminated Unions

### Implementation
Discriminated unions use `propValues` for fast-path validation:
```typescript
// In $ZodDiscriminatedUnion
util.defineLazy(inst._zod, "propValues", () => {
  const propValues: util.PropValues = {};
  for (const option of def.options) {
    const pv = option._zod.propValues;
    // Merge propValues from all options
  }
  return propValues;
});
```

### Requirements
- Each option must have `propValues` with the discriminator key
- Values must be unique across all options
- Used for fast-path validation in `parse()`

## Performance Optimizations

### JIT Compilation
- Fast-path generation for object parsing
- Uses `eval()` when `jitless` is false
- Generates optimized parsing functions

### Lazy Evaluation
- Properties computed on-demand using `util.defineLazy()`
- Avoids circular dependency issues
- Improves initialization performance

### Caching
- `util.cached()` for expensive computations
- Schema normalization caching
- Pattern compilation caching

## Recent Fixes

### Readonly Literal Discriminators
- **Issue**: `$ZodReadonly` wasn't passing through `values` property
- **Fix**: Added `values` to `$ZodReadonlyInternals` and lazy definition
- **Impact**: Readonly literals can now be used as discriminators in discriminated unions
- **Pattern**: Follow the wrapper type pattern for all internal properties

## Development Guidelines

### Creating New Schemas
1. Define the schema definition interface
2. Define the internals interface extending `$ZodTypeInternals`
3. Define the schema interface extending `$ZodType`
4. Create constructor using `$constructor()`
5. Initialize with `$ZodType.init()`
6. Implement `parse()` function
7. Add lazy properties as needed
8. Add tests for both public API and internal properties

### Testing Internals
- Test both public API and internal property access
- Verify `propValues` are correctly computed
- Check that wrapper types pass through properties correctly
- Test error scenarios and edge cases

### Common Pitfalls
- Forgetting to pass through internal properties in wrapper types
- Not using `util.defineLazy()` for computed properties
- Missing error handling in parse functions
- Incorrect issue code usage
- Not testing internal property access

### Best Practices
- Always check if wrapper types pass through required internal properties
- Use `util.defineLazy()` for computed properties to avoid circular dependencies
- Follow existing patterns in similar schema types
- Test both the public API and internal property access
- Use proper TypeScript types for all interfaces
- Document complex internal logic with comments
